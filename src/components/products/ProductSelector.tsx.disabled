// src/components/products/ProductSelector.tsx
// Componente para seleccionar productos de la base de datos

import React, { useState, useEffect } from 'react';
import { 
  Search, 
  Plus, 
  X, 
  Package, 
  DollarSign, 
  Scale, 
  Ruler, 
  AlertTriangle,
  ShieldAlert,
  Tag,
  Edit3,
  Trash2,
  Eye
} from 'lucide-react';
import { productsService, Product, formatCurrency, formatWeight, formatDimensions } from '../../services/productsService';

interface SelectedProduct {
  product: Product;
  quantity: number;
  customDescription?: string;
  customValue?: number;
}

interface ProductSelectorProps {
  onProductsChange: (products: SelectedProduct[]) => void;
  selectedProducts?: SelectedProduct[];
  allowCustomProducts?: boolean;
  showPartidaField?: boolean;
  maxProducts?: number;
  title?: string;
  placeholder?: string;
}

const ProductSelector: React.FC<ProductSelectorProps> = ({
  onProductsChange,
  selectedProducts = [],
  allowCustomProducts = true,
  showPartidaField = false,
  maxProducts = 10,
  title = "Productos",
  placeholder = "Buscar productos por nombre, código o descripción..."
}) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [searchResults, setSearchResults] = useState<Product[]>([]);
  const [showSearchResults, setShowSearchResults] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [showAddCustomModal, setShowAddCustomModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [editingIndex, setEditingIndex] = useState(-1);

  // Datos de productos y categorías
  const [allProducts] = useState(productsService.getAllProducts());
  const [categories] = useState(productsService.getCategories());
  const [popularProducts] = useState(productsService.getPopularProducts(5));

  // Estados para producto personalizado
  const [customProduct, setCustomProduct] = useState({
    name: '',
    description: '',
    unitValue: 0,
    weight: 0,
    hsCode: '',
    category: 'electronics',
    isFragile: false,
    requiresLicense: false
  });

  // Efecto para búsqueda
  useEffect(() => {
    if (searchTerm.length >= 2) {
      const results = productsService.searchProducts(searchTerm);
      const filteredResults = selectedCategory === 'all' 
        ? results 
        : results.filter(p => p.category === selectedCategory);
      
      setSearchResults(filteredResults.slice(0, 10));
      setShowSearchResults(true);
    } else {
      setSearchResults([]);
      setShowSearchResults(false);
    }
  }, [searchTerm, selectedCategory]);

  // Agregar producto seleccionado
  const addProduct = (product: Product, quantity: number = 1) => {
    if (selectedProducts.length >= maxProducts) {
      alert(`Máximo ${maxProducts} productos permitidos`);
      return;
    }

    const existingIndex = selectedProducts.findIndex(sp => sp.product.id === product.id);
    
    if (existingIndex >= 0) {
      // Actualizar cantidad si ya existe
      const updatedProducts = [...selectedProducts];
      updatedProducts[existingIndex].quantity += quantity;
      onProductsChange(updatedProducts);
    } else {
      // Agregar nuevo producto
      const newSelectedProduct: SelectedProduct = {
        product,
        quantity,
        customDescription: product.description,
        customValue: product.unitValue
      };
      onProductsChange([...selectedProducts, newSelectedProduct]);
    }

    setSearchTerm('');
    setShowSearchResults(false);
  };

  // Remover producto
  const removeProduct = (index: number) => {
    const updatedProducts = selectedProducts.filter((_, i) => i !== index);
    onProductsChange(updatedProducts);
  };

  // Actualizar cantidad
  const updateQuantity = (index: number, quantity: number) => {
    if (quantity <= 0) {
      removeProduct(index);
      return;
    }

    const updatedProducts = [...selectedProducts];
    updatedProducts[index].quantity = quantity;
    onProductsChange(updatedProducts);
  };

  // Actualizar descripción personalizada
  const updateCustomDescription = (index: number, description: string) => {
    const updatedProducts = [...selectedProducts];
    updatedProducts[index].customDescription = description;
    onProductsChange(updatedProducts);
  };

  // Actualizar valor personalizado
  const updateCustomValue = (index: number, value: number) => {
    const updatedProducts = [...selectedProducts];
    updatedProducts[index].customValue = value;
    onProductsChange(updatedProducts);
  };

  // Crear producto personalizado
  const createCustomProduct = () => {
    const newProduct: Product = {
      id: `CUSTOM-${Date.now()}`,
      code: `CUSTOM-${Date.now()}`,
      name: customProduct.name,
      description: customProduct.description,
      category: customProduct.category,
      unitValue: customProduct.unitValue,
      currency: 'USD',
      weight: customProduct.weight,
      dimensions: { length: 0, width: 0, height: 0 },
      hsCode: customProduct.hsCode,
      isFragile: customProduct.isFragile,
      requiresLicense: customProduct.requiresLicense,
      tags: ['custom'],
      isActive: true,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };

    addProduct(newProduct, 1);
    setShowAddCustomModal(false);
    resetCustomProduct();
  };

  // Resetear formulario de producto personalizado
  const resetCustomProduct = () => {
    setCustomProduct({
      name: '',
      description: '',
      unitValue: 0,
      weight: 0,
      hsCode: '',
      category: 'electronics',
      isFragile: false,
      requiresLicense: false
    });
  };

  // Abrir modal de edición
  const openEditModal = (index: number) => {
    setEditingIndex(index);
    setShowEditModal(true);
  };

  // Calcular totales
  const totalValue = selectedProducts.reduce((sum, sp) => 
    sum + (sp.customValue || sp.product.unitValue) * sp.quantity, 0
  );
  
  const totalWeight = selectedProducts.reduce((sum, sp) => 
    sum + sp.product.weight * sp.quantity, 0
  );

  const totalQuantity = selectedProducts.reduce((sum, sp) => sum + sp.quantity, 0);

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h3 className="text-lg font-semibold text-gray-900">{title}</h3>
          <p className="text-sm text-gray-600">
            {selectedProducts.length} productos seleccionados
            {totalQuantity > 0 && ` (${totalQuantity} unidades)`}
          </p>
        </div>
        
        {allowCustomProducts && (
          <button
            onClick={() => setShowAddCustomModal(true)}
            className="flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
          >
            <Plus className="w-4 h-4" />
            Producto Personalizado
          </button>
        )}
      </div>

      {/* Buscador */}
      <div className="space-y-4">
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
          <input
            type="text"
            placeholder={placeholder}
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>

        {/* Filtro por categoría */}
        <div className="flex items-center gap-2 overflow-x-auto pb-2">
          <button
            onClick={() => setSelectedCategory('all')}
            className={`px-4 py-2 rounded-full text-sm font-medium whitespace-nowrap ${
              selectedCategory === 'all'
                ? 'bg-blue-600 text-white'
                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
            }`}
          >
            Todas las categorías
          </button>
          {categories.map((category) => (
            <button
              key={category.id}
              onClick={() => setSelectedCategory(category.id)}
              className={`px-4 py-2 rounded-full text-sm font-medium whitespace-nowrap ${
                selectedCategory === category.id
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
              }`}
            >
              {category.name}
            </button>
          ))}
        </div>
      </div>

      {/* Resultados de búsqueda */}
      {showSearchResults && searchResults.length > 0 && (
        <div className="bg-white border border-gray-200 rounded-lg shadow-lg max-h-64 overflow-y-auto">
          {searchResults.map((product) => (
            <div
              key={product.id}
              className="flex items-center justify-between p-4 hover:bg-gray-50 border-b border-gray-100 cursor-pointer"
              onClick={() => addProduct(product)}
            >
              <div className="flex-1">
                <div className="flex items-center gap-2 mb-1">
                  <h4 className="font-medium text-gray-900">{product.name}</h4>
                  {product.isFragile && (
                    <AlertTriangle className="w-4 h-4 text-yellow-500" title="Frágil" />
                  )}
                  {product.requiresLicense && (
                    <ShieldAlert className="w-4 h-4 text-red-500" title="Requiere Licencia" />
                  )}
                </div>
                <p className="text-sm text-gray-600 mb-1">{product.description}</p>
                <div className="flex items-center gap-4 text-xs text-gray-500">
                  <span>Código: {product.code}</span>
                  <span>Partida: {product.hsCode}</span>
                  <span>{formatWeight(product.weight)}</span>
                </div>
              </div>
              <div className="text-right">
                <p className="font-semibold text-gray-900">
                  {formatCurrency(product.unitValue)}
                </p>
                <p className="text-xs text-gray-500">por unidad</p>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Productos populares (cuando no hay búsqueda) */}
      {!showSearchResults && searchTerm.length < 2 && (
        <div className="bg-gray-50 rounded-lg p-4">
          <h4 className="font-medium text-gray-900 mb-3">Productos Populares</h4>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
            {popularProducts.map((product) => (
              <button
                key={product.id}
                onClick={() => addProduct(product)}
                className="text-left p-3 bg-white rounded-lg border border-gray-200 hover:border-blue-300 hover:bg-blue-50 transition-colors"
              >
                <div className="flex items-center gap-2 mb-1">
                  <Package className="w-4 h-4 text-gray-400" />
                  <span className="font-medium text-sm text-gray-900">{product.name}</span>
                </div>
                <p className="text-xs text-gray-600 mb-2">{product.description}</p>
                <div className="flex items-center justify-between">
                  <span className="text-xs text-gray-500">Partida: {product.hsCode}</span>
                  <span className="font-semibold text-sm text-blue-600">
                    {formatCurrency(product.unitValue)}
                  </span>
                </div>
              </button>
            ))}
          </div>
        </div>
      )}

      {/* Lista de productos seleccionados */}
      {selectedProducts.length > 0 && (
        <div className="bg-white rounded-lg border border-gray-200">
          <div className="p-4 border-b border-gray-200">
            <h4 className="font-medium text-gray-900">Productos Seleccionados</h4>
          </div>
          
          <div className="divide-y divide-gray-200">
            {selectedProducts.map((selectedProduct, index) => (
              <div key={`${selectedProduct.product.id}-${index}`} className="p-4">
                <div className="flex items-start gap-4">
                  {/* Información del producto */}
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-2">
                      <h5 className="font-medium text-gray-900">
                        {selectedProduct.product.name}
                      </h5>
                      {selectedProduct.product.isFragile && (
                        <AlertTriangle className="w-4 h-4 text-yellow-500" title="Frágil" />
                      )}
                      {selectedProduct.product.requiresLicense && (
                        <ShieldAlert className="w-4 h-4 text-red-500" title="Requiere Licencia" />
                      )}
                    </div>
                    
                    {/* Descripción editable */}
                    <div className="mb-2">
                      <label className="block text-xs font-medium text-gray-700 mb-1">
                        Descripción
                      </label>
                      <textarea
                        value={selectedProduct.customDescription || selectedProduct.product.description}
                        onChange={(e) => updateCustomDescription(index, e.target.value)}
                        rows={2}
                        className="w-full text-sm border border-gray-300 rounded px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      />
                    </div>

                    {/* Información adicional */}
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-xs text-gray-600">
                      <div>
                        <span className="font-medium">Código:</span>
                        <br />
                        {selectedProduct.product.code}
                      </div>
                      {showPartidaField && (
                        <div>
                          <span className="font-medium">Partida:</span>
                          <br />
                          {selectedProduct.product.hsCode}
                        </div>
                      )}
                      <div>
                        <span className="font-medium">Peso:</span>
                        <br />
                        {formatWeight(selectedProduct.product.weight)}
                      </div>
                      <div>
                        <span className="font-medium">Dimensiones:</span>
                        <br />
                        {formatDimensions(selectedProduct.product.dimensions)}
                      </div>
                    </div>
                  </div>

                  {/* Controles de cantidad y valor */}
                  <div className="flex flex-col gap-3 min-w-0 w-48">
                    {/* Cantidad */}
                    <div>
                      <label className="block text-xs font-medium text-gray-700 mb-1">
                        Cantidad
                      </label>
                      <div className="flex items-center gap-2">
                        <button
                          onClick={() => updateQuantity(index, selectedProduct.quantity - 1)}
                          className="w-8 h-8 flex items-center justify-center bg-gray-100 hover:bg-gray-200 rounded border"
                        >
                          -
                        </button>
                        <input
                          type="number"
                          min="1"
                          value={selectedProduct.quantity}
                          onChange={(e) => updateQuantity(index, parseInt(e.target.value) || 1)}
                          className="flex-1 text-center border border-gray-300 rounded px-2 py-1 text-sm"
                        />
                        <button
                          onClick={() => updateQuantity(index, selectedProduct.quantity + 1)}
                          className="w-8 h-8 flex items-center justify-center bg-gray-100 hover:bg-gray-200 rounded border"
                        >
                          +
                        </button>
                      </div>
                    </div>

                    {/* Valor unitario */}
                    <div>
                      <label className="block text-xs font-medium text-gray-700 mb-1">
                        Valor Unitario
                      </label>
                      <div className="relative">
                        <DollarSign className="absolute left-2 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                        <input
                          type="number"
                          step="0.01"
                          min="0"
                          value={selectedProduct.customValue || selectedProduct.product.unitValue}
                          onChange={(e) => updateCustomValue(index, parseFloat(e.target.value) || 0)}
                          className="w-full pl-8 pr-3 py-2 text-sm border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        />
                      </div>
                    </div>

                    {/* Valor total */}
                    <div className="bg-gray-50 rounded p-2">
                      <div className="text-xs font-medium text-gray-700">Total:</div>
                      <div className="font-semibold text-gray-900">
                        {formatCurrency(
                          (selectedProduct.customValue || selectedProduct.product.unitValue) * selectedProduct.quantity
                        )}
                      </div>
                    </div>

                    {/* Acciones */}
                    <div className="flex gap-1">
                      <button
                        onClick={() => openEditModal(index)}
                        className="flex-1 p-1 text-blue-600 hover:bg-blue-50 rounded"
                        title="Editar"
                      >
                        <Edit3 className="w-4 h-4 mx-auto" />
                      </button>
                      <button
                        onClick={() => removeProduct(index)}
                        className="flex-1 p-1 text-red-600 hover:bg-red-50 rounded"
                        title="Eliminar"
                      >
                        <Trash2 className="w-4 h-4 mx-auto" />
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>

          {/* Resumen totales */}
          <div className="p-4 bg-gray-50 border-t border-gray-200">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="text-center">
                <div className="text-2xl font-bold text-blue-600">{totalQuantity}</div>
                <div className="text-sm text-gray-600">Unidades</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-green-600">{formatWeight(totalWeight)}</div>
                <div className="text-sm text-gray-600">Peso Total</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-purple-600">{formatCurrency(totalValue)}</div>
                <div className="text-sm text-gray-600">Valor Total</div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Modal Agregar Producto Personalizado */}
      {showAddCustomModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="flex justify-between items-center p-6 border-b">
              <h3 className="text-xl font-semibold text-gray-900">Agregar Producto Personalizado</h3>
              <button
                onClick={() => setShowAddCustomModal(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                <X className="w-6 h-6" />
              </button>
            </div>

            <div className="p-6 space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Nombre del Producto *
                  </label>
                  <input
                    type="text"
                    value={customProduct.name}
                    onChange={(e) => setCustomProduct({...customProduct, name: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Categoría
                  </label>
                  <select
                    value={customProduct.category}
                    onChange={(e) => setCustomProduct({...customProduct, category: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    {categories.map((category) => (
                      <option key={category.id} value={category.id}>
                        {category.name}
                      </option>
                    ))}
                  </select>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Descripción *
                </label>
                <textarea
                  value={customProduct.description}
                  onChange={(e) => setCustomProduct({...customProduct, description: e.target.value})}
                  rows={3}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  required
                />
              </div>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Valor Unitario (USD) *
                  </label>
                  <input
                    type="number"
                    step="0.01"
                    min="0"
                    value={customProduct.unitValue}
                    onChange={(e) => setCustomProduct({...customProduct, unitValue: parseFloat(e.target.value) || 0})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Peso (kg) *
                  </label>
                  <input
                    type="number"
                    step="0.1"
                    min="0"
                    value={customProduct.weight}
                    onChange={(e) => setCustomProduct({...customProduct, weight: parseFloat(e.target.value) || 0})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Código HS/Partida
                  </label>
                  <input
                    type="text"
                    value={customProduct.hsCode}
                    onChange={(e) => setCustomProduct({...customProduct, hsCode: e.target.value})}
                    placeholder="0000.00.00"
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
              </div>

              <div className="flex gap-4">
                <label className="flex items-center gap-2">
                  <input
                    type="checkbox"
                    checked={customProduct.isFragile}
                    onChange={(e) => setCustomProduct({...customProduct, isFragile: e.target.checked})}
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                  <span className="text-sm text-gray-700">Producto frágil</span>
                </label>
                <label className="flex items-center gap-2">
                  <input
                    type="checkbox"
                    checked={customProduct.requiresLicense}
                    onChange={(e) => setCustomProduct({...customProduct, requiresLicense: e.target.checked})}
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                  <span className="text-sm text-gray-700">Requiere licencia</span>
                </label>
              </div>
            </div>

            <div className="flex justify-end gap-3 p-6 border-t">
              <button
                onClick={() => setShowAddCustomModal(false)}
                className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
              >
                Cancelar
              </button>
              <button
                onClick={createCustomProduct}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                disabled={!customProduct.name || !customProduct.description || customProduct.unitValue <= 0}
              >
                Agregar Producto
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Modal Editar Producto */}
      {showEditModal && editingIndex >= 0 && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-xl max-w-lg w-full">
            <div className="flex justify-between items-center p-6 border-b">
              <h3 className="text-xl font-semibold text-gray-900">Editar Producto</h3>
              <button
                onClick={() => setShowEditModal(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                <X className="w-6 h-6" />
              </button>
            </div>

            <div className="p-6">
              <div className="bg-gray-50 rounded-lg p-4 mb-4">
                <h4 className="font-medium text-gray-900">
                  {selectedProducts[editingIndex]?.product.name}
                </h4>
                <p className="text-sm text-gray-600">
                  Código: {selectedProducts[editingIndex]?.product.code}
                </p>
              </div>

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Cantidad
                  </label>
                  <input
                    type="number"
                    min="1"
                    value={selectedProducts[editingIndex]?.quantity || 1}
                    onChange={(e) => updateQuantity(editingIndex, parseInt(e.target.value) || 1)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descripción Personalizada
                  </label>
                  <textarea
                    value={selectedProducts[editingIndex]?.customDescription || ''}
                    onChange={(e) => updateCustomDescription(editingIndex, e.target.value)}
                    rows={3}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Valor Unitario (USD)
                  </label>
                  <input
                    type="number"
                    step="0.01"
                    min="0"
                    value={selectedProducts[editingIndex]?.customValue || selectedProducts[editingIndex]?.product.unitValue || 0}
                    onChange={(e) => updateCustomValue(editingIndex, parseFloat(e.target.value) || 0)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
              </div>
            </div>

            <div className="flex justify-end gap-3 p-6 border-t">
              <button
                onClick={() => setShowEditModal(false)}
                className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
              >
                Cerrar
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Mensaje cuando no hay productos */}
      {selectedProducts.length === 0 && (
        <div className="text-center py-8 bg-gray-50 rounded-lg border-2 border-dashed border-gray-300">
          <Package className="mx-auto h-12 w-12 text-gray-400 mb-4" />
          <h3 className="text-lg font-medium text-gray-900 mb-2">No hay productos seleccionados</h3>
          <p className="text-gray-600 mb-4">
            Busca productos en la base de datos o agrega productos personalizados
          </p>
          {allowCustomProducts && (
            <button
              onClick={() => setShowAddCustomModal(true)}
              className="inline-flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
            >
              <Plus className="w-4 h-4" />
              Agregar Primer Producto
            </button>
          )}
        </div>
      )}
    </div>
  );
};

export default ProductSelector;