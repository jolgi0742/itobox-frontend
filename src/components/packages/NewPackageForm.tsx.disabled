// src/components/packages/NewPackageForm.tsx
// ACTUALIZAR - Formulario mejorado con base de datos de productos

import React, { useState } from 'react';
import { 
  Package, 
  User, 
  MapPin, 
  Truck, 
  DollarSign, 
  Scale, 
  Calendar,
  Plus,
  Save,
  X,
  AlertTriangle,
  ShieldCheck,
  Users
} from 'lucide-react';
import ProductSelector from '../products/ProductSelector';
import { productsService, Product } from '../../services/productsService';

interface SelectedProduct {
  product: Product;
  quantity: number;
  customDescription?: string;
  customValue?: number;
}

interface PackageFormData {
  // Información del remitente
  senderName: string;
  senderEmail: string;
  senderPhone: string;
  senderAddress: string;
  senderCity: string;
  senderCountry: string;

  // Información del destinatario
  recipientName: string;
  recipientEmail: string;
  recipientPhone: string;
  recipientAddress: string;
  recipientCity: string;
  recipientCountry: string;

  // Detalles del paquete
  products: SelectedProduct[];
  serviceType: 'express' | 'standard' | 'economy';
  priority: 'low' | 'normal' | 'high' | 'urgent';
  
  // Opciones especiales
  isFragile: boolean;
  requiresSignature: boolean;
  insurance: number;
  specialInstructions: string;

  // Fechas
  pickupDate: string;
  estimatedDelivery: string;

  // Asignación
  assignedCourier?: string;
}

interface NewPackageFormProps {
  onSubmit: (data: PackageFormData) => void;
  onCancel: () => void;
  initialData?: Partial<PackageFormData>;
  mode?: 'create' | 'edit';
}

// Lista de couriers disponibles
const availableCouriers = [
  { id: 'COURIER-001', name: 'Carlos Mendoza', phone: '+506 8888-1111', status: 'available' },
  { id: 'COURIER-002', name: 'Ana Pérez', phone: '+506 8888-2222', status: 'available' },
  { id: 'COURIER-003', name: 'Luis García', phone: '+506 8888-3333', status: 'busy' },
  { id: 'COURIER-004', name: 'María López', phone: '+506 8888-4444', status: 'available' },
  { id: 'COURIER-005', name: 'Pedro Jiménez', phone: '+506 8888-5555', status: 'offline' }
];

const NewPackageForm: React.FC<NewPackageFormProps> = ({
  onSubmit,
  onCancel,
  initialData,
  mode = 'create'
}) => {
  const [formData, setFormData] = useState<PackageFormData>({
    // Valores por defecto
    senderName: '',
    senderEmail: '',
    senderPhone: '',
    senderAddress: '',
    senderCity: 'San José',
    senderCountry: 'Costa Rica',

    recipientName: '',
    recipientEmail: '',
    recipientPhone: '',
    recipientAddress: '',
    recipientCity: 'Miami',
    recipientCountry: 'Estados Unidos',

    products: [],
    serviceType: 'standard',
    priority: 'normal',

    isFragile: false,
    requiresSignature: false,
    insurance: 0,
    specialInstructions: '',

    pickupDate: new Date().toISOString().split('T')[0],
    estimatedDelivery: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],

    assignedCourier: '',

    // Aplicar datos iniciales si existen
    ...initialData
  });

  const [showCourierModal, setShowCourierModal] = useState(false);
  const [currentStep, setCurrentStep] = useState(1);
  const [errors, setErrors] = useState<Record<string, string>>({});

  // Manejar cambios en el formulario
  const handleInputChange = (field: keyof PackageFormData, value: any) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));

    // Limpiar errores cuando el usuario empiece a escribir
    if (errors[field]) {
      setErrors(prev => ({
        ...prev,
        [field]: ''
      }));
    }
  };

  // Manejar cambios en productos
  const handleProductsChange = (products: SelectedProduct[]) => {
    setFormData(prev => ({
      ...prev,
      products
    }));

    // Auto-detectar si el paquete es frágil
    const hasFragileProducts = products.some(p => p.product.isFragile);
    if (hasFragileProducts && !formData.isFragile) {
      setFormData(prev => ({
        ...prev,
        isFragile: true
      }));
    }
  };

  // Validar formulario
  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};

    // Validar remitente
    if (!formData.senderName) newErrors.senderName = 'Nombre del remitente es requerido';
    if (!formData.senderEmail) newErrors.senderEmail = 'Email del remitente es requerido';
    if (!formData.senderPhone) newErrors.senderPhone = 'Teléfono del remitente es requerido';
    if (!formData.senderAddress) newErrors.senderAddress = 'Dirección del remitente es requerida';

    // Validar destinatario
    if (!formData.recipientName) newErrors.recipientName = 'Nombre del destinatario es requerido';
    if (!formData.recipientEmail) newErrors.recipientEmail = 'Email del destinatario es requerido';
    if (!formData.recipientPhone) newErrors.recipientPhone = 'Teléfono del destinatario es requerido';
    if (!formData.recipientAddress) newErrors.recipientAddress = 'Dirección del destinatario es requerida';

    // Validar productos
    if (formData.products.length === 0) {
      newErrors.products = 'Debe agregar al menos un producto';
    }

    // Validar fechas
    if (!formData.pickupDate) newErrors.pickupDate = 'Fecha de recolección es requerida';
    if (!formData.estimatedDelivery) newErrors.estimatedDelivery = 'Fecha estimada de entrega es requerida';

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // Manejar envío del formulario
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();

    if (validateForm()) {
      onSubmit(formData);
    } else {
      // Ir al primer paso con errores
      if (errors.senderName || errors.senderEmail || errors.recipientName || errors.recipientEmail) {
        setCurrentStep(1);
      } else if (errors.products) {
        setCurrentStep(2);
      } else {
        setCurrentStep(3);
      }
    }
  };

  // Asignar courier
  const assignCourier = (courierId: string) => {
    setFormData(prev => ({
      ...prev,
      assignedCourier: courierId
    }));
    setShowCourierModal(false);
  };

  // Calcular totales de productos
  const totalValue = formData.products.reduce((sum, sp) => 
    sum + (sp.customValue || sp.product.unitValue) * sp.quantity, 0
  );
  
  const totalWeight = formData.products.reduce((sum, sp) => 
    sum + sp.product.weight * sp.quantity, 0
  );

  const totalQuantity = formData.products.reduce((sum, sp) => sum + sp.quantity, 0);

  // Calcular costo de envío estimado
  const getEstimatedCost = () => {
    const baseCosts = {
      express: 25,
      standard: 15,
      economy: 10
    };

    let cost = baseCosts[formData.serviceType];
    cost += totalWeight * 2; // $2 por kg
    if (formData.isFragile) cost += 10;
    if (formData.requiresSignature) cost += 5;
    if (formData.insurance > 0) cost += totalValue * 0.01; // 1% del valor

    return cost;
  };

  return (
    <div className="max-w-4xl mx-auto">
      {/* Header */}
      <div className="mb-6">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">
          {mode === 'create' ? 'Crear Nuevo Paquete' : 'Editar Paquete'}
        </h2>
        <p className="text-gray-600">
          Complete la información del paquete y seleccione los productos
        </p>
      </div>

      {/* Indicador de pasos */}
      <div className="mb-8">
        <div className="flex items-center justify-center">
          {[1, 2, 3].map((step) => (
            <div key={step} className="flex items-center">
              <button
                onClick={() => setCurrentStep(step)}
                className={`w-10 h-10 rounded-full flex items-center justify-center font-medium transition-colors ${
                  currentStep === step
                    ? 'bg-blue-600 text-white'
                    : currentStep > step
                    ? 'bg-green-600 text-white'
                    : 'bg-gray-200 text-gray-600'
                }`}
              >
                {currentStep > step ? '✓' : step}
              </button>
              {step < 3 && (
                <div className={`w-16 h-1 mx-2 ${
                  currentStep > step ? 'bg-green-600' : 'bg-gray-200'
                }`} />
              )}
            </div>
          ))}
        </div>
        <div className="flex justify-center mt-4">
          <div className="text-sm text-gray-600">
            {currentStep === 1 && 'Información de Remitente y Destinatario'}
            {currentStep === 2 && 'Selección de Productos'}
            {currentStep === 3 && 'Detalles del Envío y Confirmación'}
          </div>
        </div>
      </div>

      <form onSubmit={handleSubmit} className="space-y-8">
        {/* Paso 1: Información de Remitente y Destinatario */}
        {currentStep === 1 && (
          <div className="space-y-8">
            {/* Información del Remitente */}
            <div className="bg-white rounded-xl shadow-sm border p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                <User className="w-5 h-5 text-blue-600" />
                Información del Remitente
              </h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Nombre Completo *
                  </label>
                  <input
                    type="text"
                    value={formData.senderName}
                    onChange={(e) => handleInputChange('senderName', e.target.value)}
                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                      errors.senderName ? 'border-red-300' : 'border-gray-300'
                    }`}
                    placeholder="Ej: Juan Pérez"
                  />
                  {errors.senderName && (
                    <p className="mt-1 text-sm text-red-600">{errors.senderName}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Email *
                  </label>
                  <input
                    type="email"
                    value={formData.senderEmail}
                    onChange={(e) => handleInputChange('senderEmail', e.target.value)}
                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                      errors.senderEmail ? 'border-red-300' : 'border-gray-300'
                    }`}
                    placeholder="juan@example.com"
                  />
                  {errors.senderEmail && (
                    <p className="mt-1 text-sm text-red-600">{errors.senderEmail}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Teléfono *
                  </label>
                  <input
                    type="tel"
                    value={formData.senderPhone}
                    onChange={(e) => handleInputChange('senderPhone', e.target.value)}
                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                      errors.senderPhone ? 'border-red-300' : 'border-gray-300'
                    }`}
                    placeholder="+506 8888-9999"
                  />
                  {errors.senderPhone && (
                    <p className="mt-1 text-sm text-red-600">{errors.senderPhone}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Ciudad
                  </label>
                  <input
                    type="text"
                    value={formData.senderCity}
                    onChange={(e) => handleInputChange('senderCity', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="San José"
                  />
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Dirección Completa *
                  </label>
                  <textarea
                    value={formData.senderAddress}
                    onChange={(e) => handleInputChange('senderAddress', e.target.value)}
                    rows={3}
                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                      errors.senderAddress ? 'border-red-300' : 'border-gray-300'
                    }`}
                    placeholder="Dirección completa con detalles específicos"
                  />
                  {errors.senderAddress && (
                    <p className="mt-1 text-sm text-red-600">{errors.senderAddress}</p>
                  )}
                </div>
              </div>
            </div>

            {/* Información del Destinatario */}
            <div className="bg-white rounded-xl shadow-sm border p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                <MapPin className="w-5 h-5 text-green-600" />
                Información del Destinatario
              </h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Nombre Completo *
                  </label>
                  <input
                    type="text"
                    value={formData.recipientName}
                    onChange={(e) => handleInputChange('recipientName', e.target.value)}
                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                      errors.recipientName ? 'border-red-300' : 'border-gray-300'
                    }`}
                    placeholder="Ej: María González"
                  />
                  {errors.recipientName && (
                    <p className="mt-1 text-sm text-red-600">{errors.recipientName}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Email *
                  </label>
                  <input
                    type="email"
                    value={formData.recipientEmail}
                    onChange={(e) => handleInputChange('recipientEmail', e.target.value)}
                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                      errors.recipientEmail ? 'border-red-300' : 'border-gray-300'
                    }`}
                    placeholder="maria@example.com"
                  />
                  {errors.recipientEmail && (
                    <p className="mt-1 text-sm text-red-600">{errors.recipientEmail}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Teléfono *
                  </label>
                  <input
                    type="tel"
                    value={formData.recipientPhone}
                    onChange={(e) => handleInputChange('recipientPhone', e.target.value)}
                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                      errors.recipientPhone ? 'border-red-300' : 'border-gray-300'
                    }`}
                    placeholder="+1 305-555-0123"
                  />
                  {errors.recipientPhone && (
                    <p className="mt-1 text-sm text-red-600">{errors.recipientPhone}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Ciudad
                  </label>
                  <input
                    type="text"
                    value={formData.recipientCity}
                    onChange={(e) => handleInputChange('recipientCity', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Miami"
                  />
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Dirección Completa *
                  </label>
                  <textarea
                    value={formData.recipientAddress}
                    onChange={(e) => handleInputChange('recipientAddress', e.target.value)}
                    rows={3}
                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                      errors.recipientAddress ? 'border-red-300' : 'border-gray-300'
                    }`}
                    placeholder="Dirección completa con detalles específicos"
                  />
                  {errors.recipientAddress && (
                    <p className="mt-1 text-sm text-red-600">{errors.recipientAddress}</p>
                  )}
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Paso 2: Selección de Productos */}
        {currentStep === 2 && (
          <div className="bg-white rounded-xl shadow-sm border p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
              <Package className="w-5 h-5 text-purple-600" />
              Productos del Paquete
            </h3>

            {errors.products && (
              <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-lg">
                <p className="text-sm text-red-600">{errors.products}</p>
              </div>
            )}

            <ProductSelector
              onProductsChange={handleProductsChange}
              selectedProducts={formData.products}
              showPartidaField={true}
              maxProducts={10}
              title="Contenido del Paquete"
              placeholder="Buscar productos por nombre, código o descripción..."
            />

            {/* Resumen de productos */}
            {formData.products.length > 0 && (
              <div className="mt-6 bg-gray-50 rounded-lg p-4">
                <h4 className="font-medium text-gray-900 mb-3">Resumen del Paquete</h4>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className="text-center">
                    <div className="text-2xl font-bold text-blue-600">{totalQuantity}</div>
                    <div className="text-sm text-gray-600">Productos</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl font-bold text-green-600">{totalWeight.toFixed(2)} kg</div>
                    <div className="text-sm text-gray-600">Peso Total</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl font-bold text-purple-600">${totalValue.toFixed(2)}</div>
                    <div className="text-sm text-gray-600">Valor Declarado</div>
                  </div>
                </div>
              </div>
            )}
          </div>
        )}

        {/* Paso 3: Detalles del Envío */}
        {currentStep === 3 && (
          <div className="space-y-6">
            {/* Tipo de Servicio */}
            <div className="bg-white rounded-xl shadow-sm border p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                <Truck className="w-5 h-5 text-orange-600" />
                Tipo de Servicio
              </h3>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                {[
                  { value: 'express', label: 'Express', description: '1-2 días', price: '+$10' },
                  { value: 'standard', label: 'Estándar', description: '3-5 días', price: 'Base' },
                  { value: 'economy', label: 'Económico', description: '5-7 días', price: '-$5' }
                ].map((service) => (
                  <label
                    key={service.value}
                    className={`cursor-pointer p-4 border rounded-lg transition-colors ${
                      formData.serviceType === service.value
                        ? 'border-blue-500 bg-blue-50'
                        : 'border-gray-300 hover:border-gray-400'
                    }`}
                  >
                    <input
                      type="radio"
                      name="serviceType"
                      value={service.value}
                      checked={formData.serviceType === service.value}
                      onChange={(e) => handleInputChange('serviceType', e.target.value)}
                      className="sr-only"
                    />
                    <div className="text-center">
                      <div className="font-medium text-gray-900">{service.label}</div>
                      <div className="text-sm text-gray-600">{service.description}</div>
                      <div className="text-sm font-medium text-blue-600">{service.price}</div>
                    </div>
                  </label>
                ))}
              </div>
            </div>

            {/* Opciones Especiales */}
            <div className="bg-white rounded-xl shadow-sm border p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                <ShieldCheck className="w-5 h-5 text-indigo-600" />
                Opciones Especiales
              </h3>

              <div className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <label className="flex items-center gap-3 p-3 border border-gray-200 rounded-lg hover:bg-gray-50">
                    <input
                      type="checkbox"
                      checked={formData.isFragile}
                      onChange={(e) => handleInputChange('isFragile', e.target.checked)}
                      className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    />
                    <div className="flex items-center gap-2">
                      <AlertTriangle className="w-4 h-4 text-yellow-500" />
                      <span className="text-sm font-medium text-gray-900">Paquete Frágil</span>
                    </div>
                  </label>

                  <label className="flex items-center gap-3 p-3 border border-gray-200 rounded-lg hover:bg-gray-50">
                    <input
                      type="checkbox"
                      checked={formData.requiresSignature}
                      onChange={(e) => handleInputChange('requiresSignature', e.target.checked)}
                      className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    />
                    <div className="flex items-center gap-2">
                      <User className="w-4 h-4 text-blue-500" />
                      <span className="text-sm font-medium text-gray-900">Requiere Firma</span>
                    </div>
                  </label>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Prioridad
                    </label>
                    <select
                      value={formData.priority}
                      onChange={(e) => handleInputChange('priority', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    >
                      <option value="low">Baja</option>
                      <option value="normal">Normal</option>
                      <option value="high">Alta</option>
                      <option value="urgent">Urgente</option>
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Seguro (USD)
                    </label>
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={formData.insurance}
                      onChange={(e) => handleInputChange('insurance', parseFloat(e.target.value) || 0)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="0.00"
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Instrucciones Especiales
                  </label>
                  <textarea
                    value={formData.specialInstructions}
                    onChange={(e) => handleInputChange('specialInstructions', e.target.value)}
                    rows={3}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Instrucciones adicionales para el manejo del paquete..."
                  />
                </div>
              </div>
            </div>

            {/* Fechas y Asignación */}
            <div className="bg-white rounded-xl shadow-sm border p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                <Calendar className="w-5 h-5 text-green-600" />
                Fechas y Asignación
              </h3>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Fecha de Recolección *
                  </label>
                  <input
                    type="date"
                    value={formData.pickupDate}
                    onChange={(e) => handleInputChange('pickupDate', e.target.value)}
                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                      errors.pickupDate ? 'border-red-300' : 'border-gray-300'
                    }`}
                  />
                  {errors.pickupDate && (
                    <p className="mt-1 text-sm text-red-600">{errors.pickupDate}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Entrega Estimada *
                  </label>
                  <input
                    type="date"
                    value={formData.estimatedDelivery}
                    onChange={(e) => handleInputChange('estimatedDelivery', e.target.value)}
                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                      errors.estimatedDelivery ? 'border-red-300' : 'border-gray-300'
                    }`}
                  />
                  {errors.estimatedDelivery && (
                    <p className="mt-1 text-sm text-red-600">{errors.estimatedDelivery}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Asignar Courier
                  </label>
                  <div className="flex gap-2">
                    <select
                      value={formData.assignedCourier}
                      onChange={(e) => handleInputChange('assignedCourier', e.target.value)}
                      className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    >
                      <option value="">Asignar después</option>
                      {availableCouriers
                        .filter(courier => courier.status === 'available')
                        .map((courier) => (
                          <option key={courier.id} value={courier.id}>
                            {courier.name}
                          </option>
                        ))}
                    </select>
                    <button
                      type="button"
                      onClick={() => setShowCourierModal(true)}
                      className="px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                      title="Ver todos los couriers"
                    >
                      <Users className="w-4 h-4" />
                    </button>
                  </div>
                </div>
              </div>
            </div>

            {/* Resumen de Costos */}
            <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl border p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                <DollarSign className="w-5 h-5 text-green-600" />
                Resumen de Costos
              </h3>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-2">
                  <div className="flex justify-between">
                    <span className="text-gray-600">Costo base del servicio:</span>
                    <span className="font-medium">${getEstimatedCost().toFixed(2)}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Valor declarado:</span>
                    <span className="font-medium">${totalValue.toFixed(2)}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Peso total:</span>
                    <span className="font-medium">{totalWeight.toFixed(2)} kg</span>
                  </div>
                  {formData.insurance > 0 && (
                    <div className="flex justify-between">
                      <span className="text-gray-600">Seguro:</span>
                      <span className="font-medium">${formData.insurance.toFixed(2)}</span>
                    </div>
                  )}
                </div>
                
                <div className="bg-white rounded-lg p-4 border">
                  <div className="text-center">
                    <div className="text-2xl font-bold text-green-600">
                      ${(getEstimatedCost() + formData.insurance).toFixed(2)}
                    </div>
                    <div className="text-sm text-gray-600">Costo Total Estimado</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Botones de navegación */}
        <div className="flex justify-between pt-6 border-t">
          <div>
            {currentStep > 1 && (
              <button
                type="button"
                onClick={() => setCurrentStep(currentStep - 1)}
                className="px-6 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
              >
                Anterior
              </button>
            )}
          </div>

          <div className="flex gap-3">
            <button
              type="button"
              onClick={onCancel}
              className="px-6 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
            >
              Cancelar
            </button>
            
            {currentStep < 3 ? (
              <button
                type="button"
                onClick={() => setCurrentStep(currentStep + 1)}
                className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center gap-2"
              >
                Siguiente
                <Plus className="w-4 h-4" />
              </button>
            ) : (
              <button
                type="submit"
                className="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center gap-2"
              >
                <Save className="w-4 h-4" />
                {mode === 'create' ? 'Crear Paquete' : 'Guardar Cambios'}
              </button>
            )}
          </div>
        </div>
      </form>

      {/* Modal de Selección de Courier */}
      {showCourierModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-xl max-w-2xl w-full">
            <div className="flex justify-between items-center p-6 border-b">
              <h3 className="text-xl font-semibold text-gray-900">Seleccionar Courier</h3>
              <button
                onClick={() => setShowCourierModal(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                <X className="w-6 h-6" />
              </button>
            </div>

            <div className="p-6">
              <div className="space-y-3">
                {availableCouriers.map((courier) => (
                  <div
                    key={courier.id}
                    className={`p-4 border rounded-lg cursor-pointer transition-colors ${
                      courier.status === 'available'
                        ? 'border-green-200 hover:bg-green-50'
                        : courier.status === 'busy'
                        ? 'border-yellow-200 bg-yellow-50'
                        : 'border-gray-200 bg-gray-50'
                    }`}
                    onClick={() => courier.status === 'available' && assignCourier(courier.id)}
                  >
                    <div className="flex items-center justify-between">
                      <div>
                        <h4 className="font-medium text-gray-900">{courier.name}</h4>
                        <p className="text-sm text-gray-600">{courier.phone}</p>
                      </div>
                      <div className="flex items-center gap-2">
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                          courier.status === 'available'
                            ? 'bg-green-100 text-green-800'
                            : courier.status === 'busy'
                            ? 'bg-yellow-100 text-yellow-800'
                            : 'bg-gray-100 text-gray-800'
                        }`}>
                          {courier.status === 'available' ? 'Disponible' :
                           courier.status === 'busy' ? 'Ocupado' : 'Offline'}
                        </span>
                        {formData.assignedCourier === courier.id && (
                          <span className="text-blue-600">✓ Seleccionado</span>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            <div className="flex justify-end gap-3 p-6 border-t">
              <button
                onClick={() => setShowCourierModal(false)}
                className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
              >
                Cerrar
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default NewPackageForm;