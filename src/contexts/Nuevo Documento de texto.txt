import React, { createContext, useContext, useState, useEffect } from 'react';
import { User, LogOut, Settings, Bell, Shield, UserCheck } from 'lucide-react';

// ===== INTERFACES =====
interface User {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  role: 'admin' | 'courier' | 'client';
  avatar?: string;
  company?: string;
  phone?: string;
  createdAt: string;
}

interface AuthContextType {
  user: User | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  login: (email: string, password: string) => Promise<boolean>;
  logout: () => void;
  updateProfile: (userData: Partial<User>) => void;
}

interface AuthProviderProps {
  children: React.ReactNode;
}

// ===== CONTEXT =====
const AuthContext = createContext<AuthContextType | undefined>(undefined);

// ===== PROVIDER =====
export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  // ===== CARGAR USUARIO AL INICIAR =====
  useEffect(() => {
    const loadStoredUser = async () => {
      try {
        const storedUser = localStorage.getItem('itobox_user');
        const storedToken = localStorage.getItem('itobox_token');
        
        if (storedUser && storedToken) {
          const userData = JSON.parse(storedUser);
          setUser(userData);
          console.log('‚úÖ Usuario cargado desde localStorage:', userData.email);
        }
      } catch (error) {
        console.error('‚ùå Error cargando usuario:', error);
        localStorage.removeItem('itobox_user');
        localStorage.removeItem('itobox_token');
      } finally {
        setIsLoading(false);
      }
    };

    loadStoredUser();
  }, []);

  // ===== LOGIN =====
  const login = async (email: string, password: string): Promise<boolean> => {
    setIsLoading(true);
    
    try {
      console.log('üîê Intentando login con:', email);
      
      // Simular API call
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // Usuarios predefinidos para demo
      const demoUsers = {
        'admin@itobox.com': {
          id: '1',
          email: 'admin@itobox.com',
          firstName: 'Admin',
          lastName: 'ITOBOX',
          role: 'admin' as const,
          company: 'ITOBOX Courier',
          phone: '+1 (555) 123-4567',
          createdAt: '2024-01-01T00:00:00Z',
          avatar: 'üë®‚Äçüíº'
        },
        'courier@itobox.com': {
          id: '2', 
          email: 'courier@itobox.com',
          firstName: 'Juan',
          lastName: 'P√©rez',
          role: 'courier' as const,
          phone: '+1 (555) 234-5678',
          createdAt: '2024-01-15T00:00:00Z',
          avatar: 'üöõ'
        },
        'client@itobox.com': {
          id: '3',
          email: 'client@itobox.com', 
          firstName: 'Mar√≠a',
          lastName: 'Gonz√°lez',
          role: 'client' as const,
          company: 'Tech Solutions Inc.',
          phone: '+1 (555) 345-6789',
          createdAt: '2024-02-01T00:00:00Z',
          avatar: 'üë©‚Äçüíº'
        }
      };

      // Verificar credenciales
      const userData = demoUsers[email as keyof typeof demoUsers];
      
      if (userData && (password === 'admin123' || password.length >= 6)) {
        // Generar token simulado
        const token = `itobox_token_${Date.now()}_${userData.id}`;
        
        // Guardar en localStorage
        localStorage.setItem('itobox_user', JSON.stringify(userData));
        localStorage.setItem('itobox_token', token);
        
        setUser(userData);
        console.log('‚úÖ Login exitoso:', userData.email, 'Rol:', userData.role);
        return true;
      } else {
        console.log('‚ùå Credenciales inv√°lidas');
        return false;
      }
      
    } catch (error) {
      console.error('‚ùå Error en login:', error);
      return false;
    } finally {
      setIsLoading(false);
    }
  };

  // ===== LOGOUT =====
  const logout = () => {
    console.log('üì§ Cerrando sesi√≥n...');
    
    // Limpiar localStorage
    localStorage.removeItem('itobox_user');
    localStorage.removeItem('itobox_token');
    localStorage.removeItem('itobox_preferences');
    
    // Limpiar estado
    setUser(null);
    
    // Redireccionar a login
    window.location.href = '#/login';
    
    console.log('‚úÖ Sesi√≥n cerrada exitosamente');
  };

  // ===== ACTUALIZAR PERFIL =====
  const updateProfile = (userData: Partial<User>) => {
    if (!user) return;
    
    const updatedUser = { ...user, ...userData };
    setUser(updatedUser);
    localStorage.setItem('itobox_user', JSON.stringify(updatedUser));
    console.log('‚úÖ Perfil actualizado:', updatedUser.email);
  };

  const value: AuthContextType = {
    user,
    isAuthenticated: !!user,
    isLoading,
    login,
    logout,
    updateProfile
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

// ===== HOOK =====
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth debe ser usado dentro de AuthProvider');
  }
  return context;
};

// ===== COMPONENTE DE HEADER CON LOGOUT =====
export const AuthHeader: React.FC = () => {
  const { user, logout } = useAuth();
  const [showDropdown, setShowDropdown] = useState(false);

  if (!user) return null;

  const getRoleIcon = (role: string) => {
    switch (role) {
      case 'admin': return <Shield className="w-4 h-4 text-purple-600" />;
      case 'courier': return <UserCheck className="w-4 h-4 text-blue-600" />;
      case 'client': return <User className="w-4 h-4 text-green-600" />;
      default: return <User className="w-4 h-4 text-gray-600" />;
    }
  };

  const getRoleName = (role: string) => {
    switch (role) {
      case 'admin': return 'Administrador';
      case 'courier': return 'Courier';
      case 'client': return 'Cliente';
      default: return 'Usuario';
    }
  };

  return (
    <div className="flex items-center space-x-4">
      {/* Notificaciones */}
      <button 
        onClick={() => window.location.hash = '#/notifications'}
        className="p-2 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-100 transition-colors"
      >
        <Bell className="w-5 h-5" />
      </button>

      {/* Configuraci√≥n */}
      <button 
        onClick={() => window.location.hash = '#/settings'}
        className="p-2 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-100 transition-colors"
      >
        <Settings className="w-5 h-5" />
      </button>

      {/* Usuario Dropdown */}
      <div className="relative">
        <button
          onClick={() => setShowDropdown(!showDropdown)}
          className="flex items-center space-x-3 p-2 rounded-lg hover:bg-gray-100 transition-colors"
        >
          <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-medium text-sm">
            {user.avatar || user.firstName.charAt(0)}
          </div>
          <div className="text-left">
            <div className="flex items-center space-x-2">
              <span className="text-sm font-medium text-gray-900">
                {user.firstName} {user.lastName}
              </span>
              {getRoleIcon(user.role)}
            </div>
            <span className="text-xs text-gray-500">{getRoleName(user.role)}</span>
          </div>
        </button>

        {/* Dropdown Menu */}
        {showDropdown && (
          <div className="absolute right-0 mt-2 w-56 bg-white rounded-xl shadow-lg border border-gray-200 py-2 z-50">
            <div className="px-4 py-3 border-b border-gray-100">
              <p className="text-sm font-medium text-gray-900">{user.firstName} {user.lastName}</p>
              <p className="text-sm text-gray-500">{user.email}</p>
              <div className="flex items-center space-x-2 mt-1">
                {getRoleIcon(user.role)}
                <span className="text-xs text-gray-500">{getRoleName(user.role)}</span>
              </div>
            </div>
            
            <button
              onClick={() => {
                setShowDropdown(false);
                window.location.hash = '#/settings';
              }}
              className="w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-100 flex items-center space-x-2"
            >
              <User className="w-4 h-4" />
              <span>Ver Perfil</span>
            </button>
            
            <button
              onClick={() => {
                setShowDropdown(false);
                window.location.hash = '#/settings';
              }}
              className="w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-100 flex items-center space-x-2"
            >
              <Settings className="w-4 h-4" />
              <span>Configuraci√≥n</span>
            </button>
            
            <hr className="my-2" />
            
            <button
              onClick={() => {
                setShowDropdown(false);
                logout();
              }}
              className="w-full px-4 py-2 text-left text-sm text-red-600 hover:bg-red-50 flex items-center space-x-2"
            >
              <LogOut className="w-4 h-4" />
              <span>Cerrar Sesi√≥n</span>
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

// ===== DEMO COMPONENT =====
export const AuthDemo: React.FC = () => {
  const { user, isAuthenticated, login, logout, isLoading } = useAuth();
  const [email, setEmail] = useState('admin@itobox.com');
  const [password, setPassword] = useState('admin123');
  const [loginError, setLoginError] = useState('');

  const handleLogin = async () => {
    setLoginError('');
    
    const success = await login(email, password);
    if (!success) {
      setLoginError('Credenciales inv√°lidas. Intenta con admin@itobox.com / admin123');
    }
  };

  const getRoleName = (role: string) => {
    switch (role) {
      case 'admin': return 'Administrador';
      case 'courier': return 'Courier';
      case 'client': return 'Cliente';
      default: return 'Usuario';
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Cargando...</p>
        </div>
      </div>
    );
  }

  if (!isAuthenticated) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100">
        <div className="bg-white p-8 rounded-2xl shadow-xl w-full max-w-md">
          <div className="text-center mb-8">
            <div className="w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center mx-auto mb-4">
              <User className="w-8 h-8 text-white" />
            </div>
            <h1 className="text-2xl font-bold text-gray-900">ITOBOX Courier</h1>
            <p className="text-gray-600">Iniciar Sesi√≥n</p>
          </div>

          <div className="space-y-4">
            {loginError && (
              <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg text-sm">
                {loginError}
              </div>
            )}
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Email</label>
              <input
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="admin@itobox.com"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Contrase√±a</label>
              <input
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="admin123"
                onKeyPress={(e) => e.key === 'Enter' && handleLogin()}
              />
            </div>
            
            <button
              onClick={handleLogin}
              disabled={isLoading}
              className="w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 transition-colors"
            >
              {isLoading ? 'Iniciando sesi√≥n...' : 'Iniciar Sesi√≥n'}
            </button>
          </div>

          <div className="mt-6 p-4 bg-gray-50 rounded-lg">
            <p className="text-xs text-gray-600 mb-2">Credenciales de demo:</p>
            <div className="space-y-1 text-xs">
              <p><strong>Admin:</strong> admin@itobox.com / admin123</p>
              <p><strong>Courier:</strong> courier@itobox.com / admin123</p>
              <p><strong>Cliente:</strong> client@itobox.com / admin123</p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <header className="bg-white shadow-sm border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center">
              <h1 className="text-xl font-semibold text-gray-900">ITOBOX Courier</h1>
            </div>
            <AuthHeader />
          </div>
        </div>
      </header>

      <main className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        <div className="px-4 py-6 sm:px-0">
          <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-lg font-medium text-gray-900 mb-4">
              ¬°Bienvenido, {user?.firstName}! üéâ
            </h2>
            
            <div className="bg-green-50 border border-green-200 rounded-lg p-4">
              <div className="flex items-center space-x-2 mb-2">
                <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                <span className="text-green-800 font-medium">Sistema de Autenticaci√≥n Funcionando</span>
              </div>
              <ul className="text-sm text-green-700 space-y-1">
                <li>‚úÖ Login/Logout completamente funcional</li>
                <li>‚úÖ Persistencia en localStorage</li>
                <li>‚úÖ Dropdown de usuario con opciones</li>
                <li>‚úÖ Roles y permisos implementados</li>
                <li>‚úÖ Redirecci√≥n autom√°tica</li>
              </ul>
            </div>

            <div className="mt-6 grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="p-4 border border-gray-200 rounded-lg">
                <h3 className="font-medium text-gray-900 mb-2">Informaci√≥n del Usuario</h3>
                <div className="text-sm text-gray-600 space-y-1">
                  <p><strong>Email:</strong> {user?.email}</p>
                  <p><strong>Rol:</strong> {user ? getRoleName(user.role) : ''}</p>
                  <p><strong>Tel√©fono:</strong> {user?.phone || 'No especificado'}</p>
                  <p><strong>Empresa:</strong> {user?.company || 'No especificada'}</p>
                </div>
              </div>

              <div className="p-4 border border-gray-200 rounded-lg">
                <h3 className="font-medium text-gray-900 mb-2">Acciones Disponibles</h3>
                <div className="space-y-2">
                  <button
                    onClick={() => window.location.hash = '#/dashboard'}
                    className="w-full text-left px-3 py-2 text-sm bg-blue-50 text-blue-700 rounded hover:bg-blue-100 transition-colors"
                  >
                    üìä Ir al Dashboard
                  </button>
                  <button
                    onClick={() => window.location.hash = '#/settings'}
                    className="w-full text-left px-3 py-2 text-sm bg-gray-50 text-gray-700 rounded hover:bg-gray-100 transition-colors"
                  >
                    ‚öôÔ∏è Configuraci√≥n
                  </button>
                  <button
                    onClick={logout}
                    className="w-full text-left px-3 py-2 text-sm bg-red-50 text-red-700 rounded hover:bg-red-100 transition-colors"
                  >
                    üö™ Cerrar Sesi√≥n
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
};

export default AuthDemo;