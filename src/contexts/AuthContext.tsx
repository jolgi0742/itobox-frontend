import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';

interface User {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  role: 'admin' | 'courier' | 'client';
  avatar?: string;
}

interface AuthState {
  user: User | null;
  token: string | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  error: string | null;
}

interface LoginCredentials {
  email: string;
  password: string;
}

interface RegisterData {
  email: string;
  password: string;
  firstName: string;
  lastName: string;
  role?: 'client' | 'courier';
}

export interface AuthContextType extends AuthState {
  login: (credentials: LoginCredentials) => Promise<boolean>;
  register: (data: RegisterData) => Promise<boolean>;
  logout: () => void;
  clearError: () => void;
  updateUser: (userData: Partial<User>) => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

// Mock users for development (simulate backend responses)
const mockUsers = [
  {
    id: '1',
    email: 'admin@itobox.com',
    password: 'admin123',
    firstName: 'Admin',
    lastName: 'Sistema',
    role: 'admin' as const
  },
  {
    id: '2', 
    email: 'courier@itobox.com',
    password: 'courier123',
    firstName: 'Carlos',
    lastName: 'Rodríguez',
    role: 'courier' as const
  },
  {
    id: '3',
    email: 'client@itobox.com', 
    password: 'client123',
    firstName: 'María',
    lastName: 'Fernández',
    role: 'client' as const
  }
];

// Simulate JWT token generation
const generateMockToken = (user: any): string => {
  const payload = {
    userId: user.id,
    email: user.email,
    role: user.role,
    iat: Date.now(),
    exp: Date.now() + (24 * 60 * 60 * 1000) // 24 hours
  };
  
  // In a real app, this would be generated by the backend
  return btoa(JSON.stringify(payload));
};

// Simulate token validation
const validateToken = (token: string): User | null => {
  try {
    const payload = JSON.parse(atob(token));
    
    // Check if token is expired
    if (payload.exp < Date.now()) {
      return null;
    }
    
    // Find user by ID
    const mockUser = mockUsers.find(u => u.id === payload.userId);
    if (!mockUser) return null;
    
    return {
      id: mockUser.id,
      email: mockUser.email,
      firstName: mockUser.firstName,
      lastName: mockUser.lastName,
      role: mockUser.role
    };
  } catch {
    return null;
  }
};

export const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [authState, setAuthState] = useState<AuthState>({
    user: null,
    token: null,
    isAuthenticated: false,
    isLoading: true,
    error: null
  });

  // Initialize auth state from localStorage
  useEffect(() => {
    const initializeAuth = () => {
      try {
        const storedToken = localStorage.getItem('itobox_token');
        const storedUser = localStorage.getItem('itobox_user');
        
        if (storedToken && storedUser) {
          // Validate stored token
          const validatedUser = validateToken(storedToken);
          
          if (validatedUser) {
            setAuthState({
              user: validatedUser,
              token: storedToken,
              isAuthenticated: true,
              isLoading: false,
              error: null
            });
            return;
          } else {
            // Token is invalid, clear storage
            localStorage.removeItem('itobox_token');
            localStorage.removeItem('itobox_user');
          }
        }
        
        setAuthState(prev => ({
          ...prev,
          isLoading: false
        }));
      } catch (error) {
        console.error('Error initializing auth:', error);
        setAuthState(prev => ({
          ...prev,
          isLoading: false,
          error: 'Error al inicializar autenticación'
        }));
      }
    };

    initializeAuth();
  }, []);

  const login = async (credentials: LoginCredentials): Promise<boolean> => {
    setAuthState(prev => ({ ...prev, isLoading: true, error: null }));

    try {
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 1000));

      // Check credentials against mock users
      const mockUser = mockUsers.find(u => 
        u.email.toLowerCase() === credentials.email.toLowerCase() && 
        u.password === credentials.password
      );

      let user: User;
      let token: string;

      if (!mockUser) {
        // Also accept any email/password combination for development
        const genericUser = {
          id: 'dev-user',
          email: credentials.email,
          firstName: 'Usuario',
          lastName: 'Demo',
          role: 'client' as const
        };

        token = generateMockToken(genericUser);
        user = {
          id: genericUser.id,
          email: genericUser.email,
          firstName: genericUser.firstName,
          lastName: genericUser.lastName,
          role: genericUser.role
        };
      } else {
        // Valid mock user found
        token = generateMockToken(mockUser);
        user = {
          id: mockUser.id,
          email: mockUser.email,
          firstName: mockUser.firstName,
          lastName: mockUser.lastName,
          role: mockUser.role
        };
      }

      // Store in localStorage
      localStorage.setItem('itobox_token', token);
      localStorage.setItem('itobox_user', JSON.stringify(user));

      setAuthState({
        user,
        token,
        isAuthenticated: true,
        isLoading: false,
        error: null
      });

      // ✨ REDIRECCIÓN AUTOMÁTICA POR ROL
setTimeout(() => {
  console.log(`Redirigiendo usuario con rol: ${user.role}`);
  
  switch (user.role) {
    case 'admin':
      console.log('Redirigiendo a dashboard admin');
      window.location.replace('/dashboard');
      break;
    case 'courier':
      console.log('Redirigiendo a couriers');
      window.location.replace('/couriers');
      break;
    case 'client':
      console.log('Redirigiendo a client-portal');
      window.location.replace('/client-portal');
      break;
    default:
      console.log('Redirigiendo a dashboard default');
      window.location.replace('/dashboard');
  }
}, 100); // Pequeño delay para ver el éxito del login

      return true;

    } catch (error) {
      setAuthState(prev => ({
        ...prev,
        isLoading: false,
        error: 'Error al iniciar sesión. Inténtalo de nuevo.'
      }));
      return false;
    }
  };

  const register = async (data: RegisterData): Promise<boolean> => {
    setAuthState(prev => ({ ...prev, isLoading: true, error: null }));

    try {
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 1500));

      // Check if email already exists
      const existingUser = mockUsers.find(u => 
        u.email.toLowerCase() === data.email.toLowerCase()
      );

      if (existingUser) {
        setAuthState(prev => ({
          ...prev,
          isLoading: false,
          error: 'El email ya está registrado'
        }));
        return false;
      }

      // Create new user
      const newUser = {
        id: `user-${Date.now()}`,
        email: data.email,
        firstName: data.firstName,
        lastName: data.lastName,
        role: data.role || 'client' as const
      };

      const token = generateMockToken(newUser);
      const user: User = {
        id: newUser.id,
        email: newUser.email,
        firstName: newUser.firstName,
        lastName: newUser.lastName,
        role: newUser.role
      };

      // Store in localStorage
      localStorage.setItem('itobox_token', token);
      localStorage.setItem('itobox_user', JSON.stringify(user));

      setAuthState({
        user,
        token,
        isAuthenticated: true,
        isLoading: false,
        error: null
      });

      // ✨ REDIRECCIÓN AUTOMÁTICA DESPUÉS DEL REGISTRO
      setTimeout(() => {
        switch (user.role) {
          case 'admin':
            window.location.href = '/dashboard';
            break;
          case 'courier':
            window.location.href = '/couriers';
            break;
          case 'client':
            window.location.href = '/client-portal';
            break;
          default:
            window.location.href = '/dashboard';
        }
      }, 500);

      return true;

    } catch (error) {
      setAuthState(prev => ({
        ...prev,
        isLoading: false,
        error: 'Error al registrarse. Inténtalo de nuevo.'
      }));
      return false;
    }
  };

  const logout = () => {
    // Clear localStorage
    localStorage.removeItem('itobox_token');
    localStorage.removeItem('itobox_user');

    setAuthState({
      user: null,
      token: null,
      isAuthenticated: false,
      isLoading: false,
      error: null
    });

    // Redirect to login or home page
    window.location.href = '/login';
  };

  const clearError = () => {
    setAuthState(prev => ({ ...prev, error: null }));
  };

  const updateUser = (userData: Partial<User>) => {
    if (authState.user) {
      const updatedUser = { ...authState.user, ...userData };
      
      setAuthState(prev => ({
        ...prev,
        user: updatedUser
      }));

      // Update localStorage
      localStorage.setItem('itobox_user', JSON.stringify(updatedUser));
    }
  };

  const contextValue: AuthContextType = {
    ...authState,
    login,
    register,
    logout,
    clearError,
    updateUser
  };

  return (
    <AuthContext.Provider value={contextValue}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export default AuthContext;